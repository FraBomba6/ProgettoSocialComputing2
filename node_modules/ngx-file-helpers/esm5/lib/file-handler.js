import { __awaiter, __decorate, __generator } from "tslib";
import { EventEmitter, Input, Output } from '@angular/core';
import { readFileAsync } from './helpers';
var FileHandler = /** @class */ (function () {
    function FileHandler() {
        this.filter = function () { return true; };
        this.readStart = new EventEmitter();
        this.readEnd = new EventEmitter();
    }
    FileHandler.prototype.readFiles = function (files, onFileRead) {
        return __awaiter(this, void 0, void 0, function () {
            var filteredFiles, fileCount;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        filteredFiles = Array.from(files).filter(this.filter);
                        fileCount = filteredFiles.length;
                        this.readStart.emit(fileCount);
                        return [4 /*yield*/, Promise.all(filteredFiles.map(function (file) { return __awaiter(_this, void 0, void 0, function () {
                                var readFile;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, readFileAsync(file, this.readMode)];
                                        case 1:
                                            readFile = _a.sent();
                                            onFileRead(readFile);
                                            return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 1:
                        _a.sent();
                        this.readEnd.emit(fileCount);
                        return [2 /*return*/];
                }
            });
        });
    };
    __decorate([
        Input()
    ], FileHandler.prototype, "readMode", void 0);
    __decorate([
        Input()
    ], FileHandler.prototype, "filter", void 0);
    __decorate([
        Output()
    ], FileHandler.prototype, "readStart", void 0);
    __decorate([
        Output()
    ], FileHandler.prototype, "readEnd", void 0);
    return FileHandler;
}());
export { FileHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS1oYW5kbGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWZpbGUtaGVscGVycy8iLCJzb3VyY2VzIjpbImxpYi9maWxlLWhhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBSTFDO0lBQUE7UUFLUyxXQUFNLEdBSUUsY0FBTSxPQUFBLElBQUksRUFBSixDQUFJLENBQUM7UUFHbkIsY0FBUyxHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7UUFHdkMsWUFBTyxHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7SUFvQjlDLENBQUM7SUFsQmlCLCtCQUFTLEdBQXpCLFVBQ0UsS0FBZSxFQUNmLFVBQXdDOzs7Ozs7O3dCQUVsQyxhQUFhLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBTyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO3dCQUM1RCxTQUFTLEdBQUcsYUFBYSxDQUFDLE1BQU0sQ0FBQzt3QkFFdkMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7d0JBRS9CLHFCQUFNLE9BQU8sQ0FBQyxHQUFHLENBQ2YsYUFBYSxDQUFDLEdBQUcsQ0FBQyxVQUFNLElBQUk7Ozs7Z0RBQ1QscUJBQU0sYUFBYSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUE7OzRDQUFuRCxRQUFRLEdBQUcsU0FBd0M7NENBQ3pELFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQzs7OztpQ0FDdEIsQ0FBQyxDQUNILEVBQUE7O3dCQUxELFNBS0MsQ0FBQzt3QkFFRixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQzs7Ozs7S0FDOUI7SUFoQ0Q7UUFEQyxLQUFLLEVBQUU7aURBQ2tCO0lBRzFCO1FBREMsS0FBSyxFQUFFOytDQUtrQjtJQUcxQjtRQURDLE1BQU0sRUFBRTtrREFDcUM7SUFHOUM7UUFEQyxNQUFNLEVBQUU7Z0RBQ21DO0lBb0I5QyxrQkFBQztDQUFBLEFBbkNELElBbUNDO1NBbkNxQixXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IHJlYWRGaWxlQXN5bmMgfSBmcm9tICcuL2hlbHBlcnMnO1xyXG5pbXBvcnQgeyBSZWFkRmlsZSB9IGZyb20gJy4vcmVhZC1maWxlJztcclxuaW1wb3J0IHsgUmVhZE1vZGUgfSBmcm9tICcuL3JlYWQtbW9kZS5lbnVtJztcclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBGaWxlSGFuZGxlciB7XHJcbiAgQElucHV0KClcclxuICBwdWJsaWMgcmVhZE1vZGU6IFJlYWRNb2RlO1xyXG5cclxuICBASW5wdXQoKVxyXG4gIHB1YmxpYyBmaWx0ZXI6IChcclxuICAgIGZpbGU6IEZpbGUsXHJcbiAgICBpbmRleDogbnVtYmVyLFxyXG4gICAgZmlsZXM6IEFycmF5PEZpbGU+XHJcbiAgKSA9PiBib29sZWFuID0gKCkgPT4gdHJ1ZTtcclxuXHJcbiAgQE91dHB1dCgpXHJcbiAgcHVibGljIHJlYWRTdGFydCA9IG5ldyBFdmVudEVtaXR0ZXI8bnVtYmVyPigpO1xyXG5cclxuICBAT3V0cHV0KClcclxuICBwdWJsaWMgcmVhZEVuZCA9IG5ldyBFdmVudEVtaXR0ZXI8bnVtYmVyPigpO1xyXG5cclxuICBwcm90ZWN0ZWQgYXN5bmMgcmVhZEZpbGVzKFxyXG4gICAgZmlsZXM6IEZpbGVMaXN0LFxyXG4gICAgb25GaWxlUmVhZDogKGZpbGVSZWFkOiBSZWFkRmlsZSkgPT4gdm9pZFxyXG4gICk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgY29uc3QgZmlsdGVyZWRGaWxlcyA9IEFycmF5LmZyb208RmlsZT4oZmlsZXMpLmZpbHRlcih0aGlzLmZpbHRlcik7XHJcbiAgICBjb25zdCBmaWxlQ291bnQgPSBmaWx0ZXJlZEZpbGVzLmxlbmd0aDtcclxuXHJcbiAgICB0aGlzLnJlYWRTdGFydC5lbWl0KGZpbGVDb3VudCk7XHJcblxyXG4gICAgYXdhaXQgUHJvbWlzZS5hbGwoXHJcbiAgICAgIGZpbHRlcmVkRmlsZXMubWFwKGFzeW5jIGZpbGUgPT4ge1xyXG4gICAgICAgIGNvbnN0IHJlYWRGaWxlID0gYXdhaXQgcmVhZEZpbGVBc3luYyhmaWxlLCB0aGlzLnJlYWRNb2RlKTtcclxuICAgICAgICBvbkZpbGVSZWFkKHJlYWRGaWxlKTtcclxuICAgICAgfSlcclxuICAgICk7XHJcblxyXG4gICAgdGhpcy5yZWFkRW5kLmVtaXQoZmlsZUNvdW50KTtcclxuICB9XHJcbn1cclxuIl19