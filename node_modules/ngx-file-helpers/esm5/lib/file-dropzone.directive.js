import { __decorate, __extends } from "tslib";
import { Directive, EventEmitter, HostListener, Output } from '@angular/core';
import { FileHandler } from './file-handler';
var FileDropzoneDirective = /** @class */ (function (_super) {
    __extends(FileDropzoneDirective, _super);
    function FileDropzoneDirective() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.fileDrop = new EventEmitter();
        return _this;
    }
    FileDropzoneDirective.prototype.onDragEnter = function (event) {
        event.stopPropagation();
        event.preventDefault();
    };
    FileDropzoneDirective.prototype.onDragOver = function (event) {
        event.stopPropagation();
        event.preventDefault();
    };
    FileDropzoneDirective.prototype.onDrop = function (event) {
        var _this = this;
        event.stopPropagation();
        event.preventDefault();
        this.readFiles(event.dataTransfer.files, function (readFile) {
            return _this.fileDrop.emit(readFile);
        });
    };
    __decorate([
        Output()
    ], FileDropzoneDirective.prototype, "fileDrop", void 0);
    __decorate([
        HostListener('dragenter', ['$event'])
    ], FileDropzoneDirective.prototype, "onDragEnter", null);
    __decorate([
        HostListener('dragover', ['$event'])
    ], FileDropzoneDirective.prototype, "onDragOver", null);
    __decorate([
        HostListener('drop', ['$event'])
    ], FileDropzoneDirective.prototype, "onDrop", null);
    FileDropzoneDirective = __decorate([
        Directive({
            selector: '[ngxFileDropzone]',
            exportAs: 'ngxFileDropzone'
        })
    ], FileDropzoneDirective);
    return FileDropzoneDirective;
}(FileHandler));
export { FileDropzoneDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS1kcm9wem9uZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZmlsZS1oZWxwZXJzLyIsInNvdXJjZXMiOlsibGliL2ZpbGUtZHJvcHpvbmUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQU83QztJQUEyQyx5Q0FBVztJQUF0RDtRQUFBLHFFQXlCQztRQXZCUSxjQUFRLEdBQUcsSUFBSSxZQUFZLEVBQVksQ0FBQzs7SUF1QmpELENBQUM7SUFwQlEsMkNBQVcsR0FBbEIsVUFBbUIsS0FBZ0I7UUFDakMsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ3hCLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBR00sMENBQVUsR0FBakIsVUFBa0IsS0FBZ0I7UUFDaEMsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ3hCLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBR00sc0NBQU0sR0FBYixVQUFjLEtBQWdCO1FBRDlCLGlCQVFDO1FBTkMsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ3hCLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUV2QixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLFVBQUEsUUFBUTtZQUMvQyxPQUFBLEtBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUE1QixDQUE0QixDQUM3QixDQUFDO0lBQ0osQ0FBQztJQXRCRDtRQURDLE1BQU0sRUFBRTsyREFDc0M7SUFHL0M7UUFEQyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7NERBSXJDO0lBR0Q7UUFEQyxZQUFZLENBQUMsVUFBVSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7MkRBSXBDO0lBR0Q7UUFEQyxZQUFZLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7dURBUWhDO0lBeEJVLHFCQUFxQjtRQUpqQyxTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsbUJBQW1CO1lBQzdCLFFBQVEsRUFBRSxpQkFBaUI7U0FDNUIsQ0FBQztPQUNXLHFCQUFxQixDQXlCakM7SUFBRCw0QkFBQztDQUFBLEFBekJELENBQTJDLFdBQVcsR0F5QnJEO1NBekJZLHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRXZlbnRFbWl0dGVyLCBIb3N0TGlzdGVuZXIsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBGaWxlSGFuZGxlciB9IGZyb20gJy4vZmlsZS1oYW5kbGVyJztcclxuaW1wb3J0IHsgUmVhZEZpbGUgfSBmcm9tICcuL3JlYWQtZmlsZSc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1tuZ3hGaWxlRHJvcHpvbmVdJyxcclxuICBleHBvcnRBczogJ25neEZpbGVEcm9wem9uZSdcclxufSlcclxuZXhwb3J0IGNsYXNzIEZpbGVEcm9wem9uZURpcmVjdGl2ZSBleHRlbmRzIEZpbGVIYW5kbGVyIHtcclxuICBAT3V0cHV0KClcclxuICBwdWJsaWMgZmlsZURyb3AgPSBuZXcgRXZlbnRFbWl0dGVyPFJlYWRGaWxlPigpO1xyXG5cclxuICBASG9zdExpc3RlbmVyKCdkcmFnZW50ZXInLCBbJyRldmVudCddKVxyXG4gIHB1YmxpYyBvbkRyYWdFbnRlcihldmVudDogRHJhZ0V2ZW50KSB7XHJcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgfVxyXG5cclxuICBASG9zdExpc3RlbmVyKCdkcmFnb3ZlcicsIFsnJGV2ZW50J10pXHJcbiAgcHVibGljIG9uRHJhZ092ZXIoZXZlbnQ6IERyYWdFdmVudCkge1xyXG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gIH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcignZHJvcCcsIFsnJGV2ZW50J10pXHJcbiAgcHVibGljIG9uRHJvcChldmVudDogRHJhZ0V2ZW50KSB7XHJcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgdGhpcy5yZWFkRmlsZXMoZXZlbnQuZGF0YVRyYW5zZmVyLmZpbGVzLCByZWFkRmlsZSA9PlxyXG4gICAgICB0aGlzLmZpbGVEcm9wLmVtaXQocmVhZEZpbGUpXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG4iXX0=