import { __decorate, __extends } from "tslib";
import { Directive, ElementRef, EventEmitter, HostListener, Input, OnInit, Output, Renderer2 } from '@angular/core';
import { FileHandler } from './file-handler';
import { coerceBooleanProperty } from './helpers';
var FilePickerDirective = /** @class */ (function (_super) {
    __extends(FilePickerDirective, _super);
    function FilePickerDirective(el, renderer) {
        var _this = _super.call(this) || this;
        _this.el = el;
        _this.renderer = renderer;
        _this.accept = '';
        _this.filePick = new EventEmitter();
        return _this;
    }
    Object.defineProperty(FilePickerDirective.prototype, "multiple", {
        get: function () {
            return this._multiple;
        },
        set: function (value) {
            this._multiple = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    FilePickerDirective.prototype.ngOnInit = function () {
        var _this = this;
        this._input = this.renderer.createElement('input');
        this.renderer.appendChild(this.el.nativeElement, this._input);
        this.renderer.setAttribute(this._input, 'type', 'file');
        this.renderer.setAttribute(this._input, 'accept', this.accept);
        this.renderer.setStyle(this._input, 'display', 'none');
        if (this.multiple) {
            this.renderer.setAttribute(this._input, 'multiple', 'multiple');
        }
        this.renderer.listen(this._input, 'change', function (event) {
            return _this._onListen(event);
        });
    };
    FilePickerDirective.prototype.reset = function () {
        if (!this._input) {
            console.error('It seems that ngOnInit() has not been executed or that the hidden _input element is null. Did you mess with the DOM?');
            return;
        }
        this._input.value = null;
    };
    FilePickerDirective.prototype.browse = function () {
        if (!this._input) {
            console.error('It seems that ngOnInit() has not been executed or that the hidden _input element is null. Did you mess with the DOM?');
            return;
        }
        this._input.click();
    };
    // The callback signature prevent the async/await usage
    FilePickerDirective.prototype._onListen = function (event) {
        var _this = this;
        var target = event.target;
        this.readFiles(target.files, function (readFile) { return _this.filePick.emit(readFile); })
            // reset value to trick change event making it changeable every time
            .finally(function () { return (target.value = ''); });
    };
    FilePickerDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    __decorate([
        Input()
    ], FilePickerDirective.prototype, "accept", void 0);
    __decorate([
        Input()
    ], FilePickerDirective.prototype, "multiple", null);
    __decorate([
        Output()
    ], FilePickerDirective.prototype, "filePick", void 0);
    __decorate([
        HostListener('click')
    ], FilePickerDirective.prototype, "browse", null);
    FilePickerDirective = __decorate([
        Directive({
            selector: '[ngxFilePicker]',
            exportAs: 'ngxFilePicker'
        })
    ], FilePickerDirective);
    return FilePickerDirective;
}(FileHandler));
export { FilePickerDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS1waWNrZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWZpbGUtaGVscGVycy8iLCJzb3VyY2VzIjpbImxpYi9maWxlLXBpY2tlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsVUFBVSxFQUNWLFlBQVksRUFDWixZQUFZLEVBQ1osS0FBSyxFQUNMLE1BQU0sRUFDTixNQUFNLEVBQ04sU0FBUyxFQUNWLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFPbEQ7SUFBeUMsdUNBQVc7SUFrQmxELDZCQUFvQixFQUFjLEVBQVUsUUFBbUI7UUFBL0QsWUFDRSxpQkFBTyxTQUNSO1FBRm1CLFFBQUUsR0FBRixFQUFFLENBQVk7UUFBVSxjQUFRLEdBQVIsUUFBUSxDQUFXO1FBaEJ4RCxZQUFNLEdBQUcsRUFBRSxDQUFDO1FBWVosY0FBUSxHQUFHLElBQUksWUFBWSxFQUFZLENBQUM7O0lBTS9DLENBQUM7SUFmRCxzQkFBVyx5Q0FBUTthQUFuQjtZQUNFLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUN4QixDQUFDO2FBQ0QsVUFBb0IsS0FBYztZQUNoQyxJQUFJLENBQUMsU0FBUyxHQUFHLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2hELENBQUM7OztPQUhBO0lBZU0sc0NBQVEsR0FBZjtRQUFBLGlCQWVDO1FBZEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNuRCxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFOUQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDeEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQy9ELElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRXZELElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNqQixJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQztTQUNqRTtRQUVELElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLFVBQUMsS0FBWTtZQUN2RCxPQUFBLEtBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDO1FBQXJCLENBQXFCLENBQ3RCLENBQUM7SUFDSixDQUFDO0lBRU0sbUNBQUssR0FBWjtRQUNFLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2hCLE9BQU8sQ0FBQyxLQUFLLENBQ1gsc0hBQXNILENBQ3ZILENBQUM7WUFDRixPQUFPO1NBQ1I7UUFFRCxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7SUFDM0IsQ0FBQztJQUdNLG9DQUFNLEdBQWI7UUFDRSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNoQixPQUFPLENBQUMsS0FBSyxDQUNYLHNIQUFzSCxDQUN2SCxDQUFDO1lBQ0YsT0FBTztTQUNSO1FBRUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRUQsdURBQXVEO0lBQy9DLHVDQUFTLEdBQWpCLFVBQWtCLEtBQVk7UUFBOUIsaUJBTUM7UUFMQyxJQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBMEIsQ0FBQztRQUVoRCxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsVUFBQSxRQUFRLElBQUksT0FBQSxLQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBNUIsQ0FBNEIsQ0FBQztZQUNwRSxvRUFBb0U7YUFDbkUsT0FBTyxDQUFDLGNBQU0sT0FBQSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLEVBQW5CLENBQW1CLENBQUMsQ0FBQztJQUN4QyxDQUFDOztnQkFuRHVCLFVBQVU7Z0JBQW9CLFNBQVM7O0lBaEIvRDtRQURDLEtBQUssRUFBRTt1REFDVztJQUduQjtRQURDLEtBQUssRUFBRTt1REFHUDtJQU9EO1FBREMsTUFBTSxFQUFFO3lEQUNzQztJQXFDL0M7UUFEQyxZQUFZLENBQUMsT0FBTyxDQUFDO3FEQVVyQjtJQTVEVSxtQkFBbUI7UUFKL0IsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLGlCQUFpQjtZQUMzQixRQUFRLEVBQUUsZUFBZTtTQUMxQixDQUFDO09BQ1csbUJBQW1CLENBc0UvQjtJQUFELDBCQUFDO0NBQUEsQUF0RUQsQ0FBeUMsV0FBVyxHQXNFbkQ7U0F0RVksbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBEaXJlY3RpdmUsXHJcbiAgRWxlbWVudFJlZixcclxuICBFdmVudEVtaXR0ZXIsXHJcbiAgSG9zdExpc3RlbmVyLFxyXG4gIElucHV0LFxyXG4gIE9uSW5pdCxcclxuICBPdXRwdXQsXHJcbiAgUmVuZGVyZXIyXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEZpbGVIYW5kbGVyIH0gZnJvbSAnLi9maWxlLWhhbmRsZXInO1xyXG5pbXBvcnQgeyBjb2VyY2VCb29sZWFuUHJvcGVydHkgfSBmcm9tICcuL2hlbHBlcnMnO1xyXG5pbXBvcnQgeyBSZWFkRmlsZSB9IGZyb20gJy4vcmVhZC1maWxlJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW25neEZpbGVQaWNrZXJdJyxcclxuICBleHBvcnRBczogJ25neEZpbGVQaWNrZXInXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGaWxlUGlja2VyRGlyZWN0aXZlIGV4dGVuZHMgRmlsZUhhbmRsZXIgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gIEBJbnB1dCgpXHJcbiAgcHVibGljIGFjY2VwdCA9ICcnO1xyXG5cclxuICBASW5wdXQoKVxyXG4gIHB1YmxpYyBnZXQgbXVsdGlwbGUoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5fbXVsdGlwbGU7XHJcbiAgfVxyXG4gIHB1YmxpYyBzZXQgbXVsdGlwbGUodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgIHRoaXMuX211bHRpcGxlID0gY29lcmNlQm9vbGVhblByb3BlcnR5KHZhbHVlKTtcclxuICB9XHJcbiAgcHJpdmF0ZSBfbXVsdGlwbGU6IGJvb2xlYW47XHJcblxyXG4gIEBPdXRwdXQoKVxyXG4gIHB1YmxpYyBmaWxlUGljayA9IG5ldyBFdmVudEVtaXR0ZXI8UmVhZEZpbGU+KCk7XHJcblxyXG4gIHByaXZhdGUgX2lucHV0OiBhbnk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge1xyXG4gICAgc3VwZXIoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBuZ09uSW5pdCgpIHtcclxuICAgIHRoaXMuX2lucHV0ID0gdGhpcy5yZW5kZXJlci5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xyXG4gICAgdGhpcy5yZW5kZXJlci5hcHBlbmRDaGlsZCh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsIHRoaXMuX2lucHV0KTtcclxuXHJcbiAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZSh0aGlzLl9pbnB1dCwgJ3R5cGUnLCAnZmlsZScpO1xyXG4gICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUodGhpcy5faW5wdXQsICdhY2NlcHQnLCB0aGlzLmFjY2VwdCk7XHJcbiAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMuX2lucHV0LCAnZGlzcGxheScsICdub25lJyk7XHJcblxyXG4gICAgaWYgKHRoaXMubXVsdGlwbGUpIHtcclxuICAgICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUodGhpcy5faW5wdXQsICdtdWx0aXBsZScsICdtdWx0aXBsZScpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMucmVuZGVyZXIubGlzdGVuKHRoaXMuX2lucHV0LCAnY2hhbmdlJywgKGV2ZW50OiBFdmVudCkgPT5cclxuICAgICAgdGhpcy5fb25MaXN0ZW4oZXZlbnQpXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHJlc2V0KCkge1xyXG4gICAgaWYgKCF0aGlzLl9pbnB1dCkge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFxyXG4gICAgICAgICdJdCBzZWVtcyB0aGF0IG5nT25Jbml0KCkgaGFzIG5vdCBiZWVuIGV4ZWN1dGVkIG9yIHRoYXQgdGhlIGhpZGRlbiBfaW5wdXQgZWxlbWVudCBpcyBudWxsLiBEaWQgeW91IG1lc3Mgd2l0aCB0aGUgRE9NPydcclxuICAgICAgKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX2lucHV0LnZhbHVlID0gbnVsbDtcclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJylcclxuICBwdWJsaWMgYnJvd3NlKCkge1xyXG4gICAgaWYgKCF0aGlzLl9pbnB1dCkge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFxyXG4gICAgICAgICdJdCBzZWVtcyB0aGF0IG5nT25Jbml0KCkgaGFzIG5vdCBiZWVuIGV4ZWN1dGVkIG9yIHRoYXQgdGhlIGhpZGRlbiBfaW5wdXQgZWxlbWVudCBpcyBudWxsLiBEaWQgeW91IG1lc3Mgd2l0aCB0aGUgRE9NPydcclxuICAgICAgKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX2lucHV0LmNsaWNrKCk7XHJcbiAgfVxyXG5cclxuICAvLyBUaGUgY2FsbGJhY2sgc2lnbmF0dXJlIHByZXZlbnQgdGhlIGFzeW5jL2F3YWl0IHVzYWdlXHJcbiAgcHJpdmF0ZSBfb25MaXN0ZW4oZXZlbnQ6IEV2ZW50KSB7XHJcbiAgICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudDtcclxuXHJcbiAgICB0aGlzLnJlYWRGaWxlcyh0YXJnZXQuZmlsZXMsIHJlYWRGaWxlID0+IHRoaXMuZmlsZVBpY2suZW1pdChyZWFkRmlsZSkpXHJcbiAgICAgIC8vIHJlc2V0IHZhbHVlIHRvIHRyaWNrIGNoYW5nZSBldmVudCBtYWtpbmcgaXQgY2hhbmdlYWJsZSBldmVyeSB0aW1lXHJcbiAgICAgIC5maW5hbGx5KCgpID0+ICh0YXJnZXQudmFsdWUgPSAnJykpO1xyXG4gIH1cclxufVxyXG4iXX0=