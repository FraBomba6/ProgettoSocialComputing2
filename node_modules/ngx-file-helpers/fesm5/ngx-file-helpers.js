import { __awaiter, __generator, __decorate, __extends } from 'tslib';
import { EventEmitter, Input, Output, HostListener, Directive, ElementRef, Renderer2, NgModule } from '@angular/core';

var ReadFileImpl = /** @class */ (function () {
    function ReadFileImpl(_underlyingFile, _readMode, _content) {
        this._underlyingFile = _underlyingFile;
        this._readMode = _readMode;
        this._content = _content;
    }
    Object.defineProperty(ReadFileImpl.prototype, "name", {
        get: function () {
            return this._underlyingFile.name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReadFileImpl.prototype, "size", {
        get: function () {
            return this._underlyingFile.size;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReadFileImpl.prototype, "type", {
        get: function () {
            return this._underlyingFile.type;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReadFileImpl.prototype, "readMode", {
        get: function () {
            return this._readMode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReadFileImpl.prototype, "content", {
        get: function () {
            return this._content;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReadFileImpl.prototype, "underlyingFile", {
        get: function () {
            return this._underlyingFile;
        },
        enumerable: true,
        configurable: true
    });
    return ReadFileImpl;
}());

var ReadMode;
(function (ReadMode) {
    ReadMode[ReadMode["arrayBuffer"] = 0] = "arrayBuffer";
    ReadMode[ReadMode["binaryString"] = 1] = "binaryString";
    ReadMode[ReadMode["dataURL"] = 2] = "dataURL";
    ReadMode[ReadMode["text"] = 3] = "text";
})(ReadMode || (ReadMode = {}));

function coerceBooleanProperty(value) {
    return value != null && "" + value !== 'false';
}
function readFileAsync(file, readMode) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    var reader = new FileReader();
                    reader.onload = function (event) {
                        var fileReader = event.target;
                        var readFile = new ReadFileImpl(file, readMode, fileReader.result);
                        resolve(readFile);
                    };
                    reader.onerror = function (event) {
                        reject(event);
                    };
                    switch (readMode) {
                        case ReadMode.arrayBuffer:
                            reader.readAsArrayBuffer(file);
                            break;
                        case ReadMode.binaryString:
                            reader.readAsBinaryString(file);
                            break;
                        case ReadMode.text:
                            reader.readAsText(file);
                            break;
                        case ReadMode.dataURL:
                        default:
                            reader.readAsDataURL(file);
                            break;
                    }
                })];
        });
    });
}

var FileHandler = /** @class */ (function () {
    function FileHandler() {
        this.filter = function () { return true; };
        this.readStart = new EventEmitter();
        this.readEnd = new EventEmitter();
    }
    FileHandler.prototype.readFiles = function (files, onFileRead) {
        return __awaiter(this, void 0, void 0, function () {
            var filteredFiles, fileCount;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        filteredFiles = Array.from(files).filter(this.filter);
                        fileCount = filteredFiles.length;
                        this.readStart.emit(fileCount);
                        return [4 /*yield*/, Promise.all(filteredFiles.map(function (file) { return __awaiter(_this, void 0, void 0, function () {
                                var readFile;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, readFileAsync(file, this.readMode)];
                                        case 1:
                                            readFile = _a.sent();
                                            onFileRead(readFile);
                                            return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 1:
                        _a.sent();
                        this.readEnd.emit(fileCount);
                        return [2 /*return*/];
                }
            });
        });
    };
    __decorate([
        Input()
    ], FileHandler.prototype, "readMode", void 0);
    __decorate([
        Input()
    ], FileHandler.prototype, "filter", void 0);
    __decorate([
        Output()
    ], FileHandler.prototype, "readStart", void 0);
    __decorate([
        Output()
    ], FileHandler.prototype, "readEnd", void 0);
    return FileHandler;
}());

var FileDropzoneDirective = /** @class */ (function (_super) {
    __extends(FileDropzoneDirective, _super);
    function FileDropzoneDirective() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.fileDrop = new EventEmitter();
        return _this;
    }
    FileDropzoneDirective.prototype.onDragEnter = function (event) {
        event.stopPropagation();
        event.preventDefault();
    };
    FileDropzoneDirective.prototype.onDragOver = function (event) {
        event.stopPropagation();
        event.preventDefault();
    };
    FileDropzoneDirective.prototype.onDrop = function (event) {
        var _this = this;
        event.stopPropagation();
        event.preventDefault();
        this.readFiles(event.dataTransfer.files, function (readFile) {
            return _this.fileDrop.emit(readFile);
        });
    };
    __decorate([
        Output()
    ], FileDropzoneDirective.prototype, "fileDrop", void 0);
    __decorate([
        HostListener('dragenter', ['$event'])
    ], FileDropzoneDirective.prototype, "onDragEnter", null);
    __decorate([
        HostListener('dragover', ['$event'])
    ], FileDropzoneDirective.prototype, "onDragOver", null);
    __decorate([
        HostListener('drop', ['$event'])
    ], FileDropzoneDirective.prototype, "onDrop", null);
    FileDropzoneDirective = __decorate([
        Directive({
            selector: '[ngxFileDropzone]',
            exportAs: 'ngxFileDropzone'
        })
    ], FileDropzoneDirective);
    return FileDropzoneDirective;
}(FileHandler));

var FilePickerDirective = /** @class */ (function (_super) {
    __extends(FilePickerDirective, _super);
    function FilePickerDirective(el, renderer) {
        var _this = _super.call(this) || this;
        _this.el = el;
        _this.renderer = renderer;
        _this.accept = '';
        _this.filePick = new EventEmitter();
        return _this;
    }
    Object.defineProperty(FilePickerDirective.prototype, "multiple", {
        get: function () {
            return this._multiple;
        },
        set: function (value) {
            this._multiple = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    FilePickerDirective.prototype.ngOnInit = function () {
        var _this = this;
        this._input = this.renderer.createElement('input');
        this.renderer.appendChild(this.el.nativeElement, this._input);
        this.renderer.setAttribute(this._input, 'type', 'file');
        this.renderer.setAttribute(this._input, 'accept', this.accept);
        this.renderer.setStyle(this._input, 'display', 'none');
        if (this.multiple) {
            this.renderer.setAttribute(this._input, 'multiple', 'multiple');
        }
        this.renderer.listen(this._input, 'change', function (event) {
            return _this._onListen(event);
        });
    };
    FilePickerDirective.prototype.reset = function () {
        if (!this._input) {
            console.error('It seems that ngOnInit() has not been executed or that the hidden _input element is null. Did you mess with the DOM?');
            return;
        }
        this._input.value = null;
    };
    FilePickerDirective.prototype.browse = function () {
        if (!this._input) {
            console.error('It seems that ngOnInit() has not been executed or that the hidden _input element is null. Did you mess with the DOM?');
            return;
        }
        this._input.click();
    };
    // The callback signature prevent the async/await usage
    FilePickerDirective.prototype._onListen = function (event) {
        var _this = this;
        var target = event.target;
        this.readFiles(target.files, function (readFile) { return _this.filePick.emit(readFile); })
            // reset value to trick change event making it changeable every time
            .finally(function () { return (target.value = ''); });
    };
    FilePickerDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    __decorate([
        Input()
    ], FilePickerDirective.prototype, "accept", void 0);
    __decorate([
        Input()
    ], FilePickerDirective.prototype, "multiple", null);
    __decorate([
        Output()
    ], FilePickerDirective.prototype, "filePick", void 0);
    __decorate([
        HostListener('click')
    ], FilePickerDirective.prototype, "browse", null);
    FilePickerDirective = __decorate([
        Directive({
            selector: '[ngxFilePicker]',
            exportAs: 'ngxFilePicker'
        })
    ], FilePickerDirective);
    return FilePickerDirective;
}(FileHandler));

var NgxFileHelpersModule = /** @class */ (function () {
    function NgxFileHelpersModule() {
    }
    NgxFileHelpersModule = __decorate([
        NgModule({
            declarations: [FileDropzoneDirective, FilePickerDirective],
            imports: [],
            exports: [FileDropzoneDirective, FilePickerDirective]
        })
    ], NgxFileHelpersModule);
    return NgxFileHelpersModule;
}());

/*
 * Public API Surface of ngx-file-helpers
 */

/**
 * Generated bundle index. Do not edit.
 */

export { FileDropzoneDirective, FilePickerDirective, NgxFileHelpersModule, ReadMode, FileHandler as ɵa };
//# sourceMappingURL=ngx-file-helpers.js.map
