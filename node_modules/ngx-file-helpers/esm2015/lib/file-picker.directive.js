import { __decorate } from "tslib";
import { Directive, ElementRef, EventEmitter, HostListener, Input, OnInit, Output, Renderer2 } from '@angular/core';
import { FileHandler } from './file-handler';
import { coerceBooleanProperty } from './helpers';
let FilePickerDirective = class FilePickerDirective extends FileHandler {
    constructor(el, renderer) {
        super();
        this.el = el;
        this.renderer = renderer;
        this.accept = '';
        this.filePick = new EventEmitter();
    }
    get multiple() {
        return this._multiple;
    }
    set multiple(value) {
        this._multiple = coerceBooleanProperty(value);
    }
    ngOnInit() {
        this._input = this.renderer.createElement('input');
        this.renderer.appendChild(this.el.nativeElement, this._input);
        this.renderer.setAttribute(this._input, 'type', 'file');
        this.renderer.setAttribute(this._input, 'accept', this.accept);
        this.renderer.setStyle(this._input, 'display', 'none');
        if (this.multiple) {
            this.renderer.setAttribute(this._input, 'multiple', 'multiple');
        }
        this.renderer.listen(this._input, 'change', (event) => this._onListen(event));
    }
    reset() {
        if (!this._input) {
            console.error('It seems that ngOnInit() has not been executed or that the hidden _input element is null. Did you mess with the DOM?');
            return;
        }
        this._input.value = null;
    }
    browse() {
        if (!this._input) {
            console.error('It seems that ngOnInit() has not been executed or that the hidden _input element is null. Did you mess with the DOM?');
            return;
        }
        this._input.click();
    }
    // The callback signature prevent the async/await usage
    _onListen(event) {
        const target = event.target;
        this.readFiles(target.files, readFile => this.filePick.emit(readFile))
            // reset value to trick change event making it changeable every time
            .finally(() => (target.value = ''));
    }
};
FilePickerDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
__decorate([
    Input()
], FilePickerDirective.prototype, "accept", void 0);
__decorate([
    Input()
], FilePickerDirective.prototype, "multiple", null);
__decorate([
    Output()
], FilePickerDirective.prototype, "filePick", void 0);
__decorate([
    HostListener('click')
], FilePickerDirective.prototype, "browse", null);
FilePickerDirective = __decorate([
    Directive({
        selector: '[ngxFilePicker]',
        exportAs: 'ngxFilePicker'
    })
], FilePickerDirective);
export { FilePickerDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS1waWNrZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWZpbGUtaGVscGVycy8iLCJzb3VyY2VzIjpbImxpYi9maWxlLXBpY2tlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsVUFBVSxFQUNWLFlBQVksRUFDWixZQUFZLEVBQ1osS0FBSyxFQUNMLE1BQU0sRUFDTixNQUFNLEVBQ04sU0FBUyxFQUNWLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFPbEQsSUFBYSxtQkFBbUIsR0FBaEMsTUFBYSxtQkFBb0IsU0FBUSxXQUFXO0lBa0JsRCxZQUFvQixFQUFjLEVBQVUsUUFBbUI7UUFDN0QsS0FBSyxFQUFFLENBQUM7UUFEVSxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQWhCeEQsV0FBTSxHQUFHLEVBQUUsQ0FBQztRQVlaLGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBWSxDQUFDO0lBTS9DLENBQUM7SUFmRCxJQUFXLFFBQVE7UUFDakIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQ3hCLENBQUM7SUFDRCxJQUFXLFFBQVEsQ0FBQyxLQUFjO1FBQ2hDLElBQUksQ0FBQyxTQUFTLEdBQUcscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQVlNLFFBQVE7UUFDYixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ25ELElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUU5RCxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN4RCxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDL0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFdkQsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2pCLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1NBQ2pFO1FBRUQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsQ0FBQyxLQUFZLEVBQUUsRUFBRSxDQUMzRCxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUN0QixDQUFDO0lBQ0osQ0FBQztJQUVNLEtBQUs7UUFDVixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNoQixPQUFPLENBQUMsS0FBSyxDQUNYLHNIQUFzSCxDQUN2SCxDQUFDO1lBQ0YsT0FBTztTQUNSO1FBRUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO0lBQzNCLENBQUM7SUFHTSxNQUFNO1FBQ1gsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDaEIsT0FBTyxDQUFDLEtBQUssQ0FDWCxzSEFBc0gsQ0FDdkgsQ0FBQztZQUNGLE9BQU87U0FDUjtRQUVELElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVELHVEQUF1RDtJQUMvQyxTQUFTLENBQUMsS0FBWTtRQUM1QixNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBMEIsQ0FBQztRQUVoRCxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNwRSxvRUFBb0U7YUFDbkUsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7Q0FDRixDQUFBOztZQXBEeUIsVUFBVTtZQUFvQixTQUFTOztBQWhCL0Q7SUFEQyxLQUFLLEVBQUU7bURBQ1c7QUFHbkI7SUFEQyxLQUFLLEVBQUU7bURBR1A7QUFPRDtJQURDLE1BQU0sRUFBRTtxREFDc0M7QUFxQy9DO0lBREMsWUFBWSxDQUFDLE9BQU8sQ0FBQztpREFVckI7QUE1RFUsbUJBQW1CO0lBSi9CLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxpQkFBaUI7UUFDM0IsUUFBUSxFQUFFLGVBQWU7S0FDMUIsQ0FBQztHQUNXLG1CQUFtQixDQXNFL0I7U0F0RVksbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBEaXJlY3RpdmUsXHJcbiAgRWxlbWVudFJlZixcclxuICBFdmVudEVtaXR0ZXIsXHJcbiAgSG9zdExpc3RlbmVyLFxyXG4gIElucHV0LFxyXG4gIE9uSW5pdCxcclxuICBPdXRwdXQsXHJcbiAgUmVuZGVyZXIyXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEZpbGVIYW5kbGVyIH0gZnJvbSAnLi9maWxlLWhhbmRsZXInO1xyXG5pbXBvcnQgeyBjb2VyY2VCb29sZWFuUHJvcGVydHkgfSBmcm9tICcuL2hlbHBlcnMnO1xyXG5pbXBvcnQgeyBSZWFkRmlsZSB9IGZyb20gJy4vcmVhZC1maWxlJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW25neEZpbGVQaWNrZXJdJyxcclxuICBleHBvcnRBczogJ25neEZpbGVQaWNrZXInXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGaWxlUGlja2VyRGlyZWN0aXZlIGV4dGVuZHMgRmlsZUhhbmRsZXIgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gIEBJbnB1dCgpXHJcbiAgcHVibGljIGFjY2VwdCA9ICcnO1xyXG5cclxuICBASW5wdXQoKVxyXG4gIHB1YmxpYyBnZXQgbXVsdGlwbGUoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5fbXVsdGlwbGU7XHJcbiAgfVxyXG4gIHB1YmxpYyBzZXQgbXVsdGlwbGUodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgIHRoaXMuX211bHRpcGxlID0gY29lcmNlQm9vbGVhblByb3BlcnR5KHZhbHVlKTtcclxuICB9XHJcbiAgcHJpdmF0ZSBfbXVsdGlwbGU6IGJvb2xlYW47XHJcblxyXG4gIEBPdXRwdXQoKVxyXG4gIHB1YmxpYyBmaWxlUGljayA9IG5ldyBFdmVudEVtaXR0ZXI8UmVhZEZpbGU+KCk7XHJcblxyXG4gIHByaXZhdGUgX2lucHV0OiBhbnk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge1xyXG4gICAgc3VwZXIoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBuZ09uSW5pdCgpIHtcclxuICAgIHRoaXMuX2lucHV0ID0gdGhpcy5yZW5kZXJlci5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xyXG4gICAgdGhpcy5yZW5kZXJlci5hcHBlbmRDaGlsZCh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsIHRoaXMuX2lucHV0KTtcclxuXHJcbiAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZSh0aGlzLl9pbnB1dCwgJ3R5cGUnLCAnZmlsZScpO1xyXG4gICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUodGhpcy5faW5wdXQsICdhY2NlcHQnLCB0aGlzLmFjY2VwdCk7XHJcbiAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMuX2lucHV0LCAnZGlzcGxheScsICdub25lJyk7XHJcblxyXG4gICAgaWYgKHRoaXMubXVsdGlwbGUpIHtcclxuICAgICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUodGhpcy5faW5wdXQsICdtdWx0aXBsZScsICdtdWx0aXBsZScpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMucmVuZGVyZXIubGlzdGVuKHRoaXMuX2lucHV0LCAnY2hhbmdlJywgKGV2ZW50OiBFdmVudCkgPT5cclxuICAgICAgdGhpcy5fb25MaXN0ZW4oZXZlbnQpXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHJlc2V0KCkge1xyXG4gICAgaWYgKCF0aGlzLl9pbnB1dCkge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFxyXG4gICAgICAgICdJdCBzZWVtcyB0aGF0IG5nT25Jbml0KCkgaGFzIG5vdCBiZWVuIGV4ZWN1dGVkIG9yIHRoYXQgdGhlIGhpZGRlbiBfaW5wdXQgZWxlbWVudCBpcyBudWxsLiBEaWQgeW91IG1lc3Mgd2l0aCB0aGUgRE9NPydcclxuICAgICAgKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX2lucHV0LnZhbHVlID0gbnVsbDtcclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJylcclxuICBwdWJsaWMgYnJvd3NlKCkge1xyXG4gICAgaWYgKCF0aGlzLl9pbnB1dCkge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFxyXG4gICAgICAgICdJdCBzZWVtcyB0aGF0IG5nT25Jbml0KCkgaGFzIG5vdCBiZWVuIGV4ZWN1dGVkIG9yIHRoYXQgdGhlIGhpZGRlbiBfaW5wdXQgZWxlbWVudCBpcyBudWxsLiBEaWQgeW91IG1lc3Mgd2l0aCB0aGUgRE9NPydcclxuICAgICAgKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX2lucHV0LmNsaWNrKCk7XHJcbiAgfVxyXG5cclxuICAvLyBUaGUgY2FsbGJhY2sgc2lnbmF0dXJlIHByZXZlbnQgdGhlIGFzeW5jL2F3YWl0IHVzYWdlXHJcbiAgcHJpdmF0ZSBfb25MaXN0ZW4oZXZlbnQ6IEV2ZW50KSB7XHJcbiAgICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudDtcclxuXHJcbiAgICB0aGlzLnJlYWRGaWxlcyh0YXJnZXQuZmlsZXMsIHJlYWRGaWxlID0+IHRoaXMuZmlsZVBpY2suZW1pdChyZWFkRmlsZSkpXHJcbiAgICAgIC8vIHJlc2V0IHZhbHVlIHRvIHRyaWNrIGNoYW5nZSBldmVudCBtYWtpbmcgaXQgY2hhbmdlYWJsZSBldmVyeSB0aW1lXHJcbiAgICAgIC5maW5hbGx5KCgpID0+ICh0YXJnZXQudmFsdWUgPSAnJykpO1xyXG4gIH1cclxufVxyXG4iXX0=